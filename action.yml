name: "Accuknox IaC"
description: "Run Scan against infrastructure as code."
inputs:
  file:
    description: 'Specify a file for scanning; cannot be used with directory input. Filter runners by file type, e.g., ".tf" for Terraform.'
    required: false
  directory:
    default: "."
    description: "Directory with infrastructure code and/or package manager files to scan"
    required: false
  compact:
    description: "Do not display code blocks in output"
    required: false
  quiet:
    description: "Display only failed checks"
    required: false
  output_format:
    description: "The format of the output. cli, json, junitxml, github_failed_only, or sarif (comma separated)"
    required: false
    default: "json"
  output_file_path:
    description: "Path and name for output file, needs to end with a comma for a single output format"
    required: false
    default: "./results.json"
  soft_fail:
    description: "Do not return an error code if there are failed checks"
    required: false
  framework:
    description: "Run only on a specific infrastructure. Supported: Kubernetes & Terraform"
    required: false
  skip_framework:
    description: "Skip a specific infrastructure"
    required: false
  token:
    description: "The token for authenticating with the CSPM panel."
    required: true
  tenant_id:
    description: "The ID of the tenant associated with the CSPM panel."
    required: true
  endpoint:
    description: "The URL of the CSPM panel to push the scan results to."
    required: true
    default: "cspm.demo.accuknox.com"
  label:
    description: "The label needed to push the findings to a particular label created in AccuKnox SaaS"
    required: true

branding:
  icon: "shield"
  color: "purple"

runs:
  using: "composite"
  steps:
    - name: Run Checkov IaC Scan
      id: checkov-scan
      run: |
        # Build the command dynamically based on inputs
        CMD="docker run --rm ghcr.io/bridgecrewio/checkov:3.2.21"
        if [ -n "${{ inputs.file }}" ]; then CMD+=" -f ${{ inputs.file }}"; fi
        if [ -n "${{ inputs.directory }}" ]; then CMD+=" -d ${{ inputs.directory }}"; fi
        if [ -n "${{ inputs.compact }}" ]; then CMD+=" --compact=${{ inputs.compact }}"; fi
        if [ -n "${{ inputs.quiet }}" ]; then CMD+=" --quiet=${{ inputs.quiet }}"; fi
        if [ -n "${{ inputs.output_format }}" ]; then CMD+=" --output-format=${{ inputs.output_format }}"; fi
        if [ -n "${{ inputs.output_file_path }}" ]; then CMD+=" --output-file-path=${{ inputs.output_file_path }}"; fi
        if [ -n "${{ inputs.framework }}" ]; then CMD+=" --framework=${{ inputs.framework }}"; fi

        # Execute the constructed command
        echo "Running command: $CMD"
        eval $CMD

        # Capture the exit code immediately
        echo "CHECKOV_EXIT_CODE=$?" >> $GITHUB_ENV
      continue-on-error: true # Allows the pipeline to continue even if there are Checkov errors
      shell: bash

    - name: Format the results
      run: |
        jq --arg repoLink "${{ github.server_url }}/${{ github.repository }}" --arg branch "${{ github.ref == 'refs/heads/main' && 'main' || github.head_ref }}" '. += [{"details": {"repo": $repoLink, "branch": $branch}}]' results/results_json.json > temp.json && mv temp.json results.json
      shell: bash

    - name: Push report to CSPM panel
      run: |
        curl --location --request POST 'https://${{ inputs.endpoint }}/api/v1/artifact/?tenant_id=${{ inputs.tenant_id }}&data_type=IAC&label=${{ inputs.label }}&save_to_s3=false' --header 'Tenant-Id: ${{ inputs.tenant_id  }}' --header 'Authorization: Bearer ${{ inputs.token }}' --form 'file=@"results.json"'
      shell: bash

    - name: Fail pipeline if Checkov found issues and soft_fail is false
      if: env.CHECKOV_EXIT_CODE != '0' && inputs.soft_fail == 'false'
      run: exit 1 # Fail the pipeline if soft_fail is false
      shell: bash
